
AVRASM ver. 2.1.30  E:\облако\Cloud Mail.Ru\Ёлектроника\ambient_light_rgb\rgb_doors\Debug\List\rgb_door.asm Sun Nov 12 00:34:38 2017

                 
                 
                 ;CodeVisionAVR C Compiler V3.10 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0047 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x3:
E:\облако\Cloud Mail.Ru\Ёлектроника\ambient_light_rgb\rgb_doors\Debug\List\rgb_door.asm(1127): warning: .cseg .db misalignment - padding zero byte
000034 00ff      	.DB  0xFF
                 _0x4:
000035 b3fc      	.DB  0xFC,0xB3
                 _0x5:
000036 fffc      	.DB  0xFC,0xFF
                 _0x6:
000037 ff00      	.DB  0x0,0xFF
                 _0x7:
000038 e200
E:\облако\Cloud Mail.Ru\Ёлектроника\ambient_light_rgb\rgb_doors\Debug\List\rgb_door.asm(1135): warning: .cseg .db misalignment - padding zero byte
000039 00fb      	.DB  0x0,0xE2,0xFB
                 _0x8:
00003a 0000
E:\облако\Cloud Mail.Ru\Ёлектроника\ambient_light_rgb\rgb_doors\Debug\List\rgb_door.asm(1137): warning: .cseg .db misalignment - padding zero byte
00003b 00ff      	.DB  0x0,0x0,0xFF
                 _0x9:
00003c 00c8
E:\облако\Cloud Mail.Ru\Ёлектроника\ambient_light_rgb\rgb_doors\Debug\List\rgb_door.asm(1139): warning: .cseg .db misalignment - padding zero byte
00003d 00ff      	.DB  0xC8,0x0,0xFF
                 _0xA:
00003e ffff
E:\облако\Cloud Mail.Ru\Ёлектроника\ambient_light_rgb\rgb_doors\Debug\List\rgb_door.asm(1141): warning: .cseg .db misalignment - padding zero byte
00003f 00ff      	.DB  0xFF,0xFF,0xFF
                 
                 __GLOBAL_INI_TBL:
000040 0002      	.DW  0x02
000041 0300      	.DW  _Orange
000042 006a      	.DW  _0x4*2
                 
000043 0002      	.DW  0x02
000044 0303      	.DW  _Green
000045 006e      	.DW  _0x6*2
                 
                 _0xFFFFFFFF:
000046 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000047 94f8      	CLI
000048 27ee      	CLR  R30
000049 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004a e0f1      	LDI  R31,1
00004b bff5      	OUT  MCUCR,R31
00004c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004d e08d      	LDI  R24,(14-2)+1
00004e e0a2      	LDI  R26,2
00004f 27bb      	CLR  R27
                 __CLEAR_REG:
000050 93ed      	ST   X+,R30
000051 958a      	DEC  R24
000052 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000053 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000054 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000055 e0a0      	LDI  R26,LOW(__SRAM_START)
000056 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e8e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006c e0e0      	LDI  R30,__GPIOR0_INIT
00006d bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006f bfed      	OUT  SPL,R30
000070 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000071 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000072 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000073 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000074 940c 00b4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.10 Advanced
                 ;Automatic Program Generator
                 ;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 11.11.2017
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega328P
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;
                 ;struct RGB_COLOR_TYPE
                 ;{
                 ;    unsigned char R;
                 ;    unsigned char G;
                 ;    unsigned char B;
                 ;};
                 ;
                 ;
                 ;struct RGB_COLOR_TYPE Red = {255, 0, 0};
                 
                 	.DSEG
                 ;struct RGB_COLOR_TYPE Orange = {252, 179, 0};
                 ;struct RGB_COLOR_TYPE Yellow = {252, 255, 0};
                 ;struct RGB_COLOR_TYPE Green = {0, 255, 0};
                 ;struct RGB_COLOR_TYPE Blue = {0, 226, 251};
                 ;struct RGB_COLOR_TYPE NavyBlue = {0, 0, 255};
                 ;struct RGB_COLOR_TYPE Violet = {200, 0, 255};
                 ;struct RGB_COLOR_TYPE White = {255, 255, 255};
                 ;struct RGB_COLOR_TYPE Black = {0, 0, 0};
                 ;
                 ;#define RED_CH              OCR0B //ќпредел€ем канал OCR1AL дл€  расного цвета
                 ;#define GREEN_CH            OCR0A //ќпредел€ем канал OCR1BL дл€ «еленого цвета
                 ;#define BLUE_CH             OCR1AL   //ќпредел€ем канал OCR2 дл€ —инего цвета
                 ;
                 ;#define  BRIGHTNESS_100     255
                 ;#define  BRIGHTNESS_75      192
                 ;#define  BRIGHTNESS_50      127
                 ;#define  BRIGHTNESS_25      64
                 ;#define  BRIGHTNESS_10      32
                 ;#define  BRIGHTNESS_5       16
                 ;#define  BRIGHTNESS_0       0
                 ;
                 ;#define RED_DDR   DDD5
                 ;#define GREEN_DDR DDD6
                 ;#define BLUE_DDR  DDB1
                 ;
                 ;void set_color(struct RGB_COLOR_TYPE color, unsigned char brightness)
                 ; 0000 003F {
                 
                 	.CSEG
                 _set_color:
                 ; .FSTART _set_color
                 ; 0000 0040 /*яркость (Brightness)
                 ; 0000 0041 
                 ; 0000 0042 Ч самое простое преобразование.
                 ; 0000 0043 ѕри:
                 ; 0000 0044 Shift=0 светодиод погашен
                 ; 0000 0045 Shift=255 светодиод горит базовым цветом.
                 ; 0000 0046 ¬се промежуточные значени€ Shift Ц это затемнение базового цвета.
                 ; 0000 0047 
                 ; 0000 0048 R_shift = (R_base * Shift) / 256
                 ; 0000 0049 G_shift = (G_base * Shift) / 256
                 ; 0000 004A B_shift = (B_base * Shift) / 256
                 ; 0000 004B 
                 ; 0000 004C */
                 ; 0000 004D if (brightness==BRIGHTNESS_100)
000076 93aa      	ST   -Y,R26
                 ;	color -> Y+1
                 ;	brightness -> Y+0
000077 81a8      	LD   R26,Y
000078 3faf      	CPI  R26,LOW(0xFF)
000079 f431      	BRNE _0xB
                 ; 0000 004E  {
                 ; 0000 004F    RED_CH = color.R;
00007a 81e9      	LDD  R30,Y+1
00007b bde8      	OUT  0x28,R30
                 ; 0000 0050    GREEN_CH = color.G;
00007c 81ea      	LDD  R30,Y+2
00007d bde7      	OUT  0x27,R30
                 ; 0000 0051    BLUE_CH = color.B;
00007e 81eb      	LDD  R30,Y+3
00007f c008      	RJMP _0x15
                 ; 0000 0052 }
                 ; 0000 0053   else
                 _0xB:
                 ; 0000 0054     {
                 ; 0000 0055      RED_CH = (color.R*brightness)/256;
000080 81a9      	LDD  R26,Y+1
000081 d05f      	RCALL SUBOPT_0x0
000082 bde8      	OUT  0x28,R30
                 ; 0000 0056      GREEN_CH = (color.G*brightness)/256;
000083 81aa      	LDD  R26,Y+2
000084 d05c      	RCALL SUBOPT_0x0
000085 bde7      	OUT  0x27,R30
                 ; 0000 0057      BLUE_CH = (color.B*brightness)/256;
000086 81ab      	LDD  R26,Y+3
000087 d059      	RCALL SUBOPT_0x0
                 _0x15:
000088 93e0 0088 	STS  136,R30
                 ; 0000 0058     }
                 ; 0000 0059 
                 ; 0000 005A }
00008a 9624      	ADIW R28,4
00008b 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;//ѕрограмма инициализации Ў»ћ
                 ;void init_pwm (void)
                 ; 0000 0062 {
                 _init_pwm:
                 ; .FSTART _init_pwm
                 ; 0000 0063 // Input/Output Ports initialization
                 ; 0000 0064 // Port B initialization
                 ; 0000 0065 DDRB=(1<<DDB5) | (1<<BLUE_DDR);
00008c e2e2      	LDI  R30,LOW(34)
00008d b9e4      	OUT  0x4,R30
                 ; 0000 0066 DDRD=(1<<GREEN_DDR) | (1<<RED_DDR);
00008e e6e0      	LDI  R30,LOW(96)
00008f b9ea      	OUT  0xA,R30
                 ; 0000 0067 
                 ; 0000 0068 
                 ; 0000 0069 // Timer/Counter 0 initialization
                 ; 0000 006A // Clock source: System Clock
                 ; 0000 006B // Clock value: 16000,000 kHz
                 ; 0000 006C // Mode: Phase correct PWM top=0xFF
                 ; 0000 006D // OC0A output: Non-Inverted PWM
                 ; 0000 006E // OC0B output: Non-Inverted PWM
                 ; 0000 006F // Timer Period: 0,031875 ms
                 ; 0000 0070 // Output Pulse(s):
                 ; 0000 0071 // OC0A Period: 0,031875 ms Width: 0 us
                 ; 0000 0072 // OC0B Period: 0,031875 ms Width: 0 us
                 ; 0000 0073 TCCR0A=(1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (1<<WGM00);
000090 eae1      	LDI  R30,LOW(161)
000091 bde4      	OUT  0x24,R30
                 ; 0000 0074 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
000092 e0e1      	LDI  R30,LOW(1)
000093 bde5      	OUT  0x25,R30
                 ; 0000 0075 TCNT0=0x00;
000094 e0e0      	LDI  R30,LOW(0)
000095 bde6      	OUT  0x26,R30
                 ; 0000 0076 
                 ; 0000 0077 GREEN_CH=0x00;
000096 bde7      	OUT  0x27,R30
                 ; 0000 0078 RED_CH=0x00;
000097 bde8      	OUT  0x28,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer/Counter 1 initialization
                 ; 0000 007B // Clock source: System Clock
                 ; 0000 007C // Clock value: 16000,000 kHz
                 ; 0000 007D // Mode: Ph. correct PWM top=0x00FF
                 ; 0000 007E // OC1A output: Non-Inverted PWM
                 ; 0000 007F // OC1B output: Disconnected
                 ; 0000 0080 // Noise Canceler: Off
                 ; 0000 0081 // Input Capture on Falling Edge
                 ; 0000 0082 // Timer Period: 0,031875 ms
                 ; 0000 0083 // Output Pulse(s):
                 ; 0000 0084 // OC1A Period: 0,031875 ms Width: 0 us
                 ; 0000 0085 // Timer1 Overflow Interrupt: Off
                 ; 0000 0086 // Input Capture Interrupt: Off
                 ; 0000 0087 // Compare A Match Interrupt: Off
                 ; 0000 0088 // Compare B Match Interrupt: Off
                 ; 0000 0089 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
000098 e8e1      	LDI  R30,LOW(129)
000099 93e0 0080 	STS  128,R30
                 ; 0000 008A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00009b e0e1      	LDI  R30,LOW(1)
00009c 93e0 0081 	STS  129,R30
                 ; 0000 008B TCNT1H=0x00;
00009e e0e0      	LDI  R30,LOW(0)
00009f 93e0 0085 	STS  133,R30
                 ; 0000 008C TCNT1L=0x00;
0000a1 93e0 0084 	STS  132,R30
                 ; 0000 008D ICR1H=0x00;
0000a3 93e0 0087 	STS  135,R30
                 ; 0000 008E ICR1L=0x00;
0000a5 93e0 0086 	STS  134,R30
                 ; 0000 008F 
                 ; 0000 0090 OCR1AH=0x00;
0000a7 93e0 0089 	STS  137,R30
                 ; 0000 0091 
                 ; 0000 0092 BLUE_CH=0x00;
0000a9 93e0 0088 	STS  136,R30
                 ; 0000 0093 
                 ; 0000 0094 OCR1BH=0x00;
0000ab 93e0 008b 	STS  139,R30
                 ; 0000 0095 OCR1BL=0x00;
0000ad 93e0 008a 	STS  138,R30
                 ; 0000 0096 
                 ; 0000 0097 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0098 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000af 93e0 006e 	STS  110,R30
                 ; 0000 0099 
                 ; 0000 009A // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 009B TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0000b1 93e0 006f 	STS  111,R30
                 ; 0000 009C }
0000b3 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 009F {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A0 // Declare your local variables here
                 ; 0000 00A1 unsigned char shift;
                 ; 0000 00A2 
                 ; 0000 00A3 // Crystal Oscillator division factor: 1
                 ; 0000 00A4 #pragma optsize-
                 ; 0000 00A5 CLKPR=(1<<CLKPCE);
                 ;	shift -> R17
0000b4 e8e0      	LDI  R30,LOW(128)
0000b5 93e0 0061 	STS  97,R30
                 ; 0000 00A6 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 93e0 0061 	STS  97,R30
                 ; 0000 00A7 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00A8 #pragma optsize+
                 ; 0000 00A9 #endif
                 ; 0000 00AA 
                 ; 0000 00AB init_pwm ();
0000ba dfd1      	RCALL _init_pwm
                 ; 0000 00AC 
                 ; 0000 00AD while (1)
                 _0xD:
                 ; 0000 00AE       {
                 ; 0000 00AF 
                 ; 0000 00B0         PORTB.5=1;
0000bb 9a2d      	SBI  0x5,5
                 ; 0000 00B1         delay_ms(500);
0000bc efa4      	LDI  R26,LOW(500)
0000bd e0b1      	LDI  R27,HIGH(500)
0000be 940e 010a 	CALL _delay_ms
                 ; 0000 00B2         PORTB.5=0;
0000c0 982d      	CBI  0x5,5
                 ; 0000 00B3         delay_ms(500);
0000c1 efa4      	LDI  R26,LOW(500)
0000c2 e0b1      	LDI  R27,HIGH(500)
0000c3 d028      	RCALL SUBOPT_0x1
                 ; 0000 00B4 
                 ; 0000 00B5         set_color(Green,BRIGHTNESS_100);
0000c4 efaf      	LDI  R26,LOW(255)
0000c5 d02e      	RCALL SUBOPT_0x2
                 ; 0000 00B6         delay_ms(1500);
                 ; 0000 00B7         set_color(Green,BRIGHTNESS_75);
0000c6 eca0      	LDI  R26,LOW(192)
0000c7 d02c      	RCALL SUBOPT_0x2
                 ; 0000 00B8         delay_ms(1500);
                 ; 0000 00B9         set_color(Green,BRIGHTNESS_50);
0000c8 e7af      	LDI  R26,LOW(127)
0000c9 d02a      	RCALL SUBOPT_0x2
                 ; 0000 00BA         delay_ms(1500);
                 ; 0000 00BB         set_color(Green,BRIGHTNESS_25);
0000ca e4a0      	LDI  R26,LOW(64)
0000cb d028      	RCALL SUBOPT_0x2
                 ; 0000 00BC         delay_ms(1500);
                 ; 0000 00BD         set_color(Green,BRIGHTNESS_10);
0000cc e2a0      	LDI  R26,LOW(32)
0000cd d026      	RCALL SUBOPT_0x2
                 ; 0000 00BE         delay_ms(1500);
                 ; 0000 00BF         set_color(Green,BRIGHTNESS_5);
0000ce e1a0      	LDI  R26,LOW(16)
0000cf d024      	RCALL SUBOPT_0x2
                 ; 0000 00C0         delay_ms(1500);
                 ; 0000 00C1         set_color(Green,BRIGHTNESS_0);
0000d0 d027      	RCALL SUBOPT_0x3
                 ; 0000 00C2         delay_ms(1500);
                 ; 0000 00C3         set_color(Orange,BRIGHTNESS_100);
0000d1 d02c      	RCALL SUBOPT_0x4
0000d2 efaf      	LDI  R26,LOW(255)
0000d3 d030      	RCALL SUBOPT_0x5
                 ; 0000 00C4         delay_ms(1500);
                 ; 0000 00C5         set_color(Orange,BRIGHTNESS_75);
0000d4 eca0      	LDI  R26,LOW(192)
0000d5 d02e      	RCALL SUBOPT_0x5
                 ; 0000 00C6         delay_ms(1500);
                 ; 0000 00C7         set_color(Orange,BRIGHTNESS_50);
0000d6 e7af      	LDI  R26,LOW(127)
0000d7 d02c      	RCALL SUBOPT_0x5
                 ; 0000 00C8         delay_ms(1500);
                 ; 0000 00C9         set_color(Orange,BRIGHTNESS_25);
0000d8 e4a0      	LDI  R26,LOW(64)
0000d9 d02a      	RCALL SUBOPT_0x5
                 ; 0000 00CA         delay_ms(1500);
                 ; 0000 00CB         set_color(Orange,BRIGHTNESS_10);
0000da e2a0      	LDI  R26,LOW(32)
0000db d028      	RCALL SUBOPT_0x5
                 ; 0000 00CC         delay_ms(1500);
                 ; 0000 00CD         set_color(Orange,BRIGHTNESS_5);
0000dc e1a0      	LDI  R26,LOW(16)
0000dd d026      	RCALL SUBOPT_0x5
                 ; 0000 00CE         delay_ms(1500);
                 ; 0000 00CF         set_color(Orange,BRIGHTNESS_0);
0000de d019      	RCALL SUBOPT_0x3
                 ; 0000 00D0         delay_ms(1500);
                 ; 0000 00D1 
                 ; 0000 00D2        }
0000df cfdb      	RJMP _0xD
                 ; 0000 00D3 
                 ; 0000 00D4 
                 ; 0000 00D5 }
                 _0x14:
0000e0 cfff      	RJMP _0x14
                 ; .FEND
                 ;
                 
                 	.DSEG
                 _Orange:
000300           	.BYTE 0x3
                 _Green:
000303           	.BYTE 0x3
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
0000e1 27bb      	CLR  R27
0000e2 81e8      	LD   R30,Y
0000e3 e0f0      	LDI  R31,0
0000e4 940e 0120 	CALL __MULW12
0000e6 01df      	MOVW R26,R30
0000e7 e0e0      	LDI  R30,LOW(256)
0000e8 e0f1      	LDI  R31,HIGH(256)
0000e9 940e 0138 	CALL __DIVW21
0000eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1:
0000ec 940e 010a 	CALL _delay_ms
0000ee e0e3      	LDI  R30,LOW(_Green)
0000ef e0f3      	LDI  R31,HIGH(_Green)
0000f0 e0a3      	LDI  R26,3
0000f1 940e 014b 	CALL __PUTPARL
0000f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
0000f4 df81      	RCALL _set_color
0000f5 edac      	LDI  R26,LOW(1500)
0000f6 e0b5      	LDI  R27,HIGH(1500)
0000f7 cff4      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0000f8 e0a0      	LDI  R26,LOW(0)
0000f9 df7c      	RCALL _set_color
0000fa edac      	LDI  R26,LOW(1500)
0000fb e0b5      	LDI  R27,HIGH(1500)
0000fc 940c 010a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0000fe e0e0      	LDI  R30,LOW(_Orange)
0000ff e0f3      	LDI  R31,HIGH(_Orange)
000100 e0a3      	LDI  R26,3
000101 940e 014b 	CALL __PUTPARL
000103 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x5:
000104 df71      	RCALL _set_color
000105 edac      	LDI  R26,LOW(1500)
000106 e0b5      	LDI  R27,HIGH(1500)
000107 940e 010a 	CALL _delay_ms
000109 cff4      	RJMP SUBOPT_0x4
                 
                 
                 	.CSEG
                 _delay_ms:
00010a 9610      	adiw r26,0
00010b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00010c ea80     +LDI R24 , LOW ( 0xFA0 )
00010d e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00010e 9701     +SBIW R24 , 1
00010f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000110 95a8      	wdr
000111 9711      	sbiw r26,1
000112 f7c9      	brne __delay_ms0
                 __delay_ms1:
000113 9508      	ret
                 
                 __ANEGW1:
000114 95f1      	NEG  R31
000115 95e1      	NEG  R30
000116 40f0      	SBCI R31,0
000117 9508      	RET
                 
                 __MULW12U:
000118 9ffa      	MUL  R31,R26
000119 2df0      	MOV  R31,R0
00011a 9feb      	MUL  R30,R27
00011b 0df0      	ADD  R31,R0
00011c 9fea      	MUL  R30,R26
00011d 2de0      	MOV  R30,R0
00011e 0df1      	ADD  R31,R1
00011f 9508      	RET
                 
                 __MULW12:
000120 d01c      	RCALL __CHKSIGNW
000121 dff6      	RCALL __MULW12U
000122 f40e      	BRTC __MULW121
000123 dff0      	RCALL __ANEGW1
                 __MULW121:
000124 9508      	RET
                 
                 __DIVW21U:
000125 2400      	CLR  R0
000126 2411      	CLR  R1
000127 e190      	LDI  R25,16
                 __DIVW21U1:
000128 0faa      	LSL  R26
000129 1fbb      	ROL  R27
00012a 1c00      	ROL  R0
00012b 1c11      	ROL  R1
00012c 1a0e      	SUB  R0,R30
00012d 0a1f      	SBC  R1,R31
00012e f418      	BRCC __DIVW21U2
00012f 0e0e      	ADD  R0,R30
000130 1e1f      	ADC  R1,R31
000131 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000132 60a1      	SBR  R26,1
                 __DIVW21U3:
000133 959a      	DEC  R25
000134 f799      	BRNE __DIVW21U1
000135 01fd      	MOVW R30,R26
000136 01d0      	MOVW R26,R0
000137 9508      	RET
                 
                 __DIVW21:
000138 d004      	RCALL __CHKSIGNW
000139 dfeb      	RCALL __DIVW21U
00013a f40e      	BRTC __DIVW211
00013b dfd8      	RCALL __ANEGW1
                 __DIVW211:
00013c 9508      	RET
                 
                 __CHKSIGNW:
00013d 94e8      	CLT
00013e fff7      	SBRS R31,7
00013f c002      	RJMP __CHKSW1
000140 dfd3      	RCALL __ANEGW1
000141 9468      	SET
                 __CHKSW1:
000142 ffb7      	SBRS R27,7
000143 c006      	RJMP __CHKSW2
000144 95a0      	COM  R26
000145 95b0      	COM  R27
000146 9611      	ADIW R26,1
000147 f800      	BLD  R0,0
000148 9403      	INC  R0
000149 fa00      	BST  R0,0
                 __CHKSW2:
00014a 9508      	RET
                 
                 __PUTPARL:
00014b 27bb      	CLR  R27
                 __PUTPAR:
00014c 0fea      	ADD  R30,R26
00014d 1ffb      	ADC  R31,R27
                 __PUTPAR0:
00014e 9002      	LD   R0,-Z
00014f 920a      	ST   -Y,R0
000150 9711      	SBIW R26,1
000151 f7e1      	BRNE __PUTPAR0
000152 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  17 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  42 r27:  15 r28:   2 r29:   1 r30:  67 r31:  17 
x  :   3 y  :  10 z  :   8 
Registers used: 14 out of 35 (40.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   7 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   0 cpc   :   0 cpi   :   1 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  28 ld    :   3 ldd   :   6 ldi   :  59 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   2 movw  :   6 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  17 pop   :   0 push  :   0 rcall :  30 ret   :  13 
reti  :   0 rjmp  :   9 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   5 std   :   0 sts   :  15 sub   :   1 subi  :   0 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 44 out of 116 (37.9%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002a6    640     38    678   32768   2.1%
[.dseg] 0x000100 0x000306      0      6      6    2048   0.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
